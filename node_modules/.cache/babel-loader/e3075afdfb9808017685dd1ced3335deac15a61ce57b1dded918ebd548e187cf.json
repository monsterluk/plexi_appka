{"ast":null,"code":"// src/calculators/formatkaCalculator.ts\n\nconst MATERIAL_PRICES = {\n  plexi: 30,\n  hips: 25,\n  petg: 35,\n  pc: 45\n};\nconst MATERIAL_DENSITIES = {\n  plexi: 1.19,\n  hips: 1.05,\n  petg: 1.27,\n  pc: 1.20\n};\nconst ADDON_PRICES = {\n  polishedEdges: 9,\n  // zł/mb\n  roundedCorners: 15,\n  // zł/narożnik\n  drillHoles: 2 // zł/otwór\n};\nexport function calculateFormatka(options) {\n  var _options$finishing, _options$finishing2, _options$finishing3;\n  // Wartości domyślne\n  const width = options.width || 1000;\n  const height = options.height || 500;\n  const quantity = options.quantity || 1;\n  const thickness = options.thickness || 3;\n\n  // Powierzchnia w m²\n  const surface = width * height * quantity / 1000000;\n\n  // Koszt materiału\n  const materialPricePerM2 = MATERIAL_PRICES[options.material];\n  const materialCost = surface * materialPricePerM2 * thickness * 1.8; // mnożnik 1.8\n\n  // Waga\n  const density = MATERIAL_DENSITIES[options.material];\n  const volume = surface * (thickness / 1000); // objętość w m³\n  const weight = volume * density * 1000; // waga w kg\n\n  // Koszty dodatków\n  let addonsCost = 0;\n  const breakdown = {};\n  if ((_options$finishing = options.finishing) !== null && _options$finishing !== void 0 && _options$finishing.polishedEdges) {\n    const edgeLength = 2 * (width + height) / 1000 * quantity; // mb\n    const polishingCost = edgeLength * ADDON_PRICES.polishedEdges;\n    addonsCost += polishingCost;\n    breakdown.polishedEdges = polishingCost;\n  }\n  if ((_options$finishing2 = options.finishing) !== null && _options$finishing2 !== void 0 && _options$finishing2.roundedCorners) {\n    const cornersCost = 4 * quantity * ADDON_PRICES.roundedCorners;\n    addonsCost += cornersCost;\n    breakdown.roundedCorners = cornersCost;\n  }\n  if ((_options$finishing3 = options.finishing) !== null && _options$finishing3 !== void 0 && _options$finishing3.drillHoles && options.finishing.drillHoles > 0) {\n    const holesCost = options.finishing.drillHoles * quantity * ADDON_PRICES.drillHoles;\n    addonsCost += holesCost;\n    breakdown.drillHoles = holesCost;\n  }\n  return {\n    surface,\n    weight,\n    materialCost,\n    addonsCost,\n    totalCost: materialCost + addonsCost,\n    breakdown\n  };\n}","map":{"version":3,"names":["MATERIAL_PRICES","plexi","hips","petg","pc","MATERIAL_DENSITIES","ADDON_PRICES","polishedEdges","roundedCorners","drillHoles","calculateFormatka","options","_options$finishing","_options$finishing2","_options$finishing3","width","height","quantity","thickness","surface","materialPricePerM2","material","materialCost","density","volume","weight","addonsCost","breakdown","finishing","edgeLength","polishingCost","cornersCost","holesCost","totalCost"],"sources":["/Users/lukaszsikorra/Projects/plexi_appka/src/calculators/formatkaCalculator.ts"],"sourcesContent":["// src/calculators/formatkaCalculator.ts\nimport { FormatkaOptions } from '../types/product.types';\nimport { CalculationResult } from '../types/calculator.types';\n\ninterface MaterialPrices {\n  [key: string]: number;\n}\n\nconst MATERIAL_PRICES: MaterialPrices = {\n  plexi: 30,\n  hips: 25,\n  petg: 35,\n  pc: 45\n};\n\nconst MATERIAL_DENSITIES: MaterialPrices = {\n  plexi: 1.19,\n  hips: 1.05,\n  petg: 1.27,\n  pc: 1.20\n};\n\nconst ADDON_PRICES = {\n  polishedEdges: 9, // zł/mb\n  roundedCorners: 15, // zł/narożnik\n  drillHoles: 2 // zł/otwór\n};\n\nexport function calculateFormatka(options: FormatkaOptions): CalculationResult {\n  // Wartości domyślne\n  const width = options.width || 1000;\n  const height = options.height || 500;\n  const quantity = options.quantity || 1;\n  const thickness = options.thickness || 3;\n  \n  // Powierzchnia w m²\n  const surface = (width * height * quantity) / 1_000_000;\n  \n  // Koszt materiału\n  const materialPricePerM2 = MATERIAL_PRICES[options.material];\n  const materialCost = surface * materialPricePerM2 * thickness * 1.8; // mnożnik 1.8\n  \n  // Waga\n  const density = MATERIAL_DENSITIES[options.material];\n  const volume = surface * (thickness / 1000); // objętość w m³\n  const weight = volume * density * 1000; // waga w kg\n  \n  // Koszty dodatków\n  let addonsCost = 0;\n  const breakdown: { [key: string]: number } = {};\n  \n  if (options.finishing?.polishedEdges) {\n    const edgeLength = 2 * (width + height) / 1000 * quantity; // mb\n    const polishingCost = edgeLength * ADDON_PRICES.polishedEdges;\n    addonsCost += polishingCost;\n    breakdown.polishedEdges = polishingCost;\n  }\n  \n  if (options.finishing?.roundedCorners) {\n    const cornersCost = 4 * quantity * ADDON_PRICES.roundedCorners;\n    addonsCost += cornersCost;\n    breakdown.roundedCorners = cornersCost;\n  }\n  \n  if (options.finishing?.drillHoles && options.finishing.drillHoles > 0) {\n    const holesCost = options.finishing.drillHoles * quantity * ADDON_PRICES.drillHoles;\n    addonsCost += holesCost;\n    breakdown.drillHoles = holesCost;\n  }\n  \n  return {\n    surface,\n    weight,\n    materialCost,\n    addonsCost,\n    totalCost: materialCost + addonsCost,\n    breakdown\n  };\n}"],"mappings":"AAAA;;AAQA,MAAMA,eAA+B,GAAG;EACtCC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRC,EAAE,EAAE;AACN,CAAC;AAED,MAAMC,kBAAkC,GAAG;EACzCJ,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACVC,EAAE,EAAE;AACN,CAAC;AAED,MAAME,YAAY,GAAG;EACnBC,aAAa,EAAE,CAAC;EAAE;EAClBC,cAAc,EAAE,EAAE;EAAE;EACpBC,UAAU,EAAE,CAAC,CAAC;AAChB,CAAC;AAED,OAAO,SAASC,iBAAiBA,CAACC,OAAwB,EAAqB;EAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA;EAC7E;EACA,MAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI,IAAI;EACnC,MAAMC,MAAM,GAAGL,OAAO,CAACK,MAAM,IAAI,GAAG;EACpC,MAAMC,QAAQ,GAAGN,OAAO,CAACM,QAAQ,IAAI,CAAC;EACtC,MAAMC,SAAS,GAAGP,OAAO,CAACO,SAAS,IAAI,CAAC;;EAExC;EACA,MAAMC,OAAO,GAAIJ,KAAK,GAAGC,MAAM,GAAGC,QAAQ,GAAI,OAAS;;EAEvD;EACA,MAAMG,kBAAkB,GAAGpB,eAAe,CAACW,OAAO,CAACU,QAAQ,CAAC;EAC5D,MAAMC,YAAY,GAAGH,OAAO,GAAGC,kBAAkB,GAAGF,SAAS,GAAG,GAAG,CAAC,CAAC;;EAErE;EACA,MAAMK,OAAO,GAAGlB,kBAAkB,CAACM,OAAO,CAACU,QAAQ,CAAC;EACpD,MAAMG,MAAM,GAAGL,OAAO,IAAID,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;EAC7C,MAAMO,MAAM,GAAGD,MAAM,GAAGD,OAAO,GAAG,IAAI,CAAC,CAAC;;EAExC;EACA,IAAIG,UAAU,GAAG,CAAC;EAClB,MAAMC,SAAoC,GAAG,CAAC,CAAC;EAE/C,KAAAf,kBAAA,GAAID,OAAO,CAACiB,SAAS,cAAAhB,kBAAA,eAAjBA,kBAAA,CAAmBL,aAAa,EAAE;IACpC,MAAMsB,UAAU,GAAG,CAAC,IAAId,KAAK,GAAGC,MAAM,CAAC,GAAG,IAAI,GAAGC,QAAQ,CAAC,CAAC;IAC3D,MAAMa,aAAa,GAAGD,UAAU,GAAGvB,YAAY,CAACC,aAAa;IAC7DmB,UAAU,IAAII,aAAa;IAC3BH,SAAS,CAACpB,aAAa,GAAGuB,aAAa;EACzC;EAEA,KAAAjB,mBAAA,GAAIF,OAAO,CAACiB,SAAS,cAAAf,mBAAA,eAAjBA,mBAAA,CAAmBL,cAAc,EAAE;IACrC,MAAMuB,WAAW,GAAG,CAAC,GAAGd,QAAQ,GAAGX,YAAY,CAACE,cAAc;IAC9DkB,UAAU,IAAIK,WAAW;IACzBJ,SAAS,CAACnB,cAAc,GAAGuB,WAAW;EACxC;EAEA,IAAI,CAAAjB,mBAAA,GAAAH,OAAO,CAACiB,SAAS,cAAAd,mBAAA,eAAjBA,mBAAA,CAAmBL,UAAU,IAAIE,OAAO,CAACiB,SAAS,CAACnB,UAAU,GAAG,CAAC,EAAE;IACrE,MAAMuB,SAAS,GAAGrB,OAAO,CAACiB,SAAS,CAACnB,UAAU,GAAGQ,QAAQ,GAAGX,YAAY,CAACG,UAAU;IACnFiB,UAAU,IAAIM,SAAS;IACvBL,SAAS,CAAClB,UAAU,GAAGuB,SAAS;EAClC;EAEA,OAAO;IACLb,OAAO;IACPM,MAAM;IACNH,YAAY;IACZI,UAAU;IACVO,SAAS,EAAEX,YAAY,GAAGI,UAAU;IACpCC;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}